Changes
=======

- Refactoring of parser and grammar
- Adding typed variable definitions and function calls without paras.
  Both become the same node type in the parser. A later pass then decides what
  it is based on the thing in the first slot (a type or function).
- Naming: Function calls without parenthesis are now called "free calls". Just
  to make it easier to write about them.
- UNFINISHED: Found no solution to differ free function calls from binary
  expressions.

Not handled:

- Function calls with blocks.
- General syntax for structure definitions (leading group of IDs, general
  modifier syntax).

Impact on existing grammar:

- syscall statement becomes a normal expr (an function call)


Grammar
=======

module  = [ def ]
def     = "func" ID [ def-mod ] "{" [ stmt ] "}"
def-mod = ( "in" | "out" )  "(" ID ID? [ "," ID ID? ] ")"

// cexpr short for chainable expression: expr with known end and no operators
// To be more exact: No user defined operators that can be an ID. In theory we
// could put all operators with explicit tokens into cexpr.
cexpr = ID
        INTL
        STRL
        "(" expr ")"
        unary_op cexpr
        cexpr "(" ( expr [ "," expr ] )? ")"
        cexpr "[" ( expr [ "," expr ] )? "]"
        cexpr "." ID
bexpr = cexpr [ binary_op cexpr ]
expr  = cexpr ( cexpr [ binary_op cexpr ] [ "," bexpr ] )?
        bexpr

unary_op  = + - not ~
binary_op = ID * / %  + - << >> < <= > >= == != & ^ | and or = *= /= %= += -= <<= >>= &= ^= |=
  // since "while" and "if" are keywords the ID doesn't match the modifier
  // syntax for the while and if statements.


block   = "{"  [ stmt ] "}"
          "do" [ stmt ] "end"

stmt = block
       "while" expr "do" [ stmt ] "end"
                    "{"  [ stmt ] "}"
                    WSNL [ stmt ] "end"  // check as last alternative, see problem (1)
       "if" expr "do" [ stmt ]     ( "else"     [ stmt ] )? "end"
                 "{"  [ stmt ] "}" ( "else" "{" [ stmt ] "}" )?
                 WSNL [ stmt ]     ( "else"     [ stmt ] )? "end"  // check as last alternative, see problem (1)
       expr "while" expr
       expr "if" expr
       expr eos

eos  = EOF
       WSNL
       ";"
       only-peek: "}"    // because of block and stmt bodies
       only-peek: "end"  // because of block and stmt bodies


Rationale: Syntax for if and while
==================================

Long-term goal is to make while a function call without paras and one block:

  while a < 10 do      while a < 10 {
    a += 1               a += 1
  end                  }

PROBLEM: "do" or "{" unnecessary because of line break. But "{" should be there
for consitency.
PROBLEM: Syntax doesn't work well for just one statement. Use modifiers instead.

CONSEQUENCE: Abandon long-term goal and keep while statement in grammar. Add
special rules to make "do" optional. Add modifier syntax for one statement bodies.

  while a < 10         while (a < 10)  // won't work, no way to tell the end of
    a += 1               a += 1        // the body
  end                  
  
  a += 1 while a < 10

PROBLEM: How to avoid that the C style one statement version that won't work
screws up the source code without the user noticing?

SOLUTION: Add a compiler pass that checks for this situation and uses the
indentation to diagnose the error.


Applying the same rules to the if statement:

  if a < 10 [ do ]           if a < 10 {
    a += 1                     a += 1
  else                       } else {
    a -= 1                     a -= 1
  end                        }
  
  if a < 10 [ do ]           if a < 10 {
    a += 1                     a += 1
  end                        }
  
  if a < 10 do a += 1 end    if a < 10 { a += 1 }
  
  a += 1 if a < 10

Same rules again for while statement:

  while a < 10 [ do ]           while a < 10 {
    a += 1                        a += 1
  end                           }
  
  while a < 10 do a += 1 end    while a < 10 { a += 1 }
  
  a += 1 while a < 10

PROBLEM (1): When block starts in next line...

  while a < 10
  {
  	a += 1
  }

This must not be parsed as a while statement where the first node of the body is
a new scope and the "end" is missing:

  while a < 10
    {
    	a += 1
    }
  end  // missing!

CONSEQUENCE: First check for "do" and "{" ignoring new lines. Only when they're
not found check for an WSNL.


Rationale: Ways to deal with variable definitions
=================================================

a) Stick with the var keyword

  "var" type-expr ID ( "=" expr )? [ "," type-expr ID ( "=" expr )? ]

b) Backtracking or try_rule() function

BUT: Can't differ between simple var definition and function call without paras
and one arg:

  int x  → var x of type int, pattern: ID ID WSNL
  foo x  → foo(x),            pattern: ID ID WSNL

c) Get var definitions through type of first slot

Look for function calls with one argument and without paras where the function
evals to a type. Then add a pass that replaces these patterns with var
definition nodes.

BUT: How to handle more complex var definitions?

  ptr(int.le) x = address(a), y = b.address
  ptr(int.le)(x = address(a), y = b.address)

Matches pattern of function calls without paras where each argument is an
assignment. Matches quite well actually.

PLAN: Create a call-or-var node when the parser finds that pattern. A later pass
then resolves these nodes to either var definition nodes or call nodes. Rules
for var definitions:

- Function slot expression has to resolve to a type. Probably compile time
  execution of expression. For a start a fixed set of IDs would do the job, too.
- Arguments can be IDs or op nodes with an assignment operator. But the left
  side of the op node has to be a single ID. Mismatch results in a compiler error.


Tricky details
--------------

a) How do we know if the function slot has to be executed at compile time?

Probably by the normal rules: If compile time stuff is referenced it needs to be
run at compile time.

  ptr(int) x  → ptr is a meta function → expression is run a compile time
  foo x       → foo is a normal function → expression is compiled (runs at run time)
  int x       → int is a compile time/meta variable → expression is run a compile time


Rationale: Free calls can't be nested
=====================================

PROBLEM: Right now one argument to a free call can be another free call. This
won't work! We can't tell where the argument list of the child free call ends.
Possible arguments should be cexpr or binary operators. Child call expressions
need explicit parenthesis.

SOLUTION: Revise grammar.

  cexpr = ID
          INTL
          STRL
          "(" expr ")"
          unary_op cexpr
          cexpr "(" ( expr [ "," expr ] )? ")"
          cexpr "[" ( expr [ "," expr ] )? "]"
          cexpr "." ID
  bexpr = cexpr [ binary_op cexpr ]
  expr  = cexpr ( cexpr [ binary_op cexpr ] [ "," bexpr ] )?
          bexpr

bexpr is short for binary expression and is a cexpr which can also contain all
binary operators.


Rationale: How to differ between free calls and a user defined binary op?
=========================================================================

Relevant part of the grammar:

  cexpr = ID
          INTL
          STRL
          "(" expr ")"
          unary_op cexpr
          cexpr "(" ( expr [ "," expr ] )? ")"
          cexpr "[" ( expr [ "," expr ] )? "]"
          cexpr "." ID
  bexpr = cexpr [ binary_op cexpr ]
  expr  = cexpr ( cexpr [ binary_op cexpr ] [ "," bexpr ] )?
          cexpr [ binary_op cexpr ]  // expanded bexpr rule to make the problem more visible

In the expr rule after parsing the first cexpr we have to decide if we have an
binary operator (binary_op) or another cexpr.

binary_op can be:     ID * / %  + - << >> < <= > >= == != & ^ | and or = *= /= %= += -= <<= >>= &= ^= |=
cexpr can start with: ID INTL STRL (
        and unary_op: + - not ~

PROBLEM: Both alternatives can start with ID "+" and "-". For these tokens we
have to figure out how to decide the correct case.

Possible follow up tokens if the expr is a free call or a binary operator:

free call: ... ID  "("  // for bracketed call
                   "["  // for index access
                   "."  // for member access
                   ID   // user define binary op
                   ...
               "-" ID
                   INTL
                   STRL
                   "("
                   "-"
                   "+"
               "+" ID
                   INTL
                   STRL
                   "("
                   "-"
                   "+"
binary op: ... ID ID   // for variable reference
                  "("  // for bracketed expr

IDEA: Can't tell difference of an ID soup in parser. Throw IDs into an AST node
resolved in a later pass where we know what is an operator, function and
variable.

PROBLEM: Figure out where that AST node should end. The problem can span
multiple statements, e.g. telling the difference between:

  foo x
  bar
  
  x dot
  y

Is impossible without knowing that foo is a function and dot an operator.

PROBLEM: Even worse depending on the alternative we have to ignore line breaks
at different positions:

  foo [nl is eos] x [nl is eos] bar
  
  x [nl is eos] dot [nl ignored] y

IDEA: As soon as we get anything else than an ID we can decide which alternative
to take (what about "+" and "-"?). Make a look ahead for the

  ID ID WSNL

token sequence to find the end. Not sure how I got that thought...

IDEA: Look how Ruby solves the problem with "+" and "-". They haven't got user
defined operators but maybe we can use the technique for them, too.

Ruby source code: ruby/parse.y
  https://github.com/ruby/ruby/blob/trunk/parse.y#L2219

Place in the grammar where unary minus and plus are handled for some kind of
expression. Might give a hint on how to solve it.

Seems like Ruby somehow gets special tokens for unary plus and minus signs.

SOLUTION (for "+" and "-"): Tell the tokenizer to differ between unary and
binary minus with a simple look ahead. If "+" or "-" is followed by a whitespace
it's binary, otherwise it's unary. Doesn't solve the ID case though.