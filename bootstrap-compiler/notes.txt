ToDo
====

x Add try(token_type_t) â†’ token_p function to the parser support code:
	
	Use a try(token_type_t) function in the parser instead of peek_type().
	When it's possible to use this everywhere the parser can automatically
	present the user a list of expected tokens at the position the parser
	failed:
	
	- Every time try() is called it remembers the expected token.
	- When a token is consumed the list is cleared.
	- When the parser failes the list contains all tried tokens at the current position.
	
	This is what we want to show the user in the error message. :)
x Rework grammar: stick to basics for now
x Make sure try() doesn't add the same token twice for the same position	
x Write down complete grammar (see syntax/2016-07-09.txt)
x Change eos behaviour of try(): Ignore line breaks unless try(T_WSNL).
x Change error message format of parser_error(): expected a, b, c after x. This
  way we don't need to write down what the next token the parser got. Avoids the
  problem if we should ignore new lines or not when finding the next token.
x Start of with a simple parser test case
	x Write very simple version of parse_expr() that parses string and int literals
	x Refactor AST allocation and printing functions
	x Write simple automated test case for parsing
x Port entire grammar
	x Implement and test cexpr grammar
	x Figure out how to handle user defined operators and function calls without
	  paras
	x Implement and test expr grammar
	x Implement and test statement grammar
	x Implement and test definition grammar
	x Implement and test return statement
x Add pass identifier to AST node members and flags to node_print to only print
  members up to a specified pass. This way the parser test can only print parser
  members and skip all the rest (like type, etc.). So we don't break the parser
  test when adding fields for later passes.
x Improve parser_error() to properly emit "before" or "after" errors when necessary.
x Add token range to AST nodes and support functions:
	x Add token list to AST nodes
	x Add to AST node creation functions
	x Create an parser_error() function that prints the tokens we're at
x Add command line arguments to lgc
x Add operator reordering pass
x Change unary ops from indices to names
x Change binary ops from indices to names
x Write test for operator reordering (either sample bases with lgc or by using functions directly)
x Add namespace pass
x Write a node_error() function thats like parser_error() but for AST processing.
  It just shows the first line of the AST nodes tokens. Otherwise we would get
  huge error messages on function nodes and the like. Usefull to emit errors in
  passes.
x Reenalble namespaces calls node_alloc(), node_print_recursive()
- Create buildins for operators
	- Replace operator tables with buildin operator objects
	- Migrate resolve uops pass to operator buildins
- Add stuff for compilation
	- Add compilation function to operators
	- Add compilation functions for nodes?
- Migrate type system
	- Add type for types (size, etc.)
	- Compiler functions for load/store
	- Reenalble type calls in node_print_recursive(), node_print_inline()
- Try to get whole compilation process to work again


For next syntax step
====================

- Add collection literals
- Just array literal: [1, 2, 3]
- Hash literal: [foo: 1, bar: 2, batz: 3]
	- Requires double collon token.
	- Requires 2 token look ahead: Check for the ID followed by a double collon.
	  Otherwise we can't differ between a leading name and an expression.


Var definitions in conditions
=============================

Variables defined in conditions of if, while, etc. that are accessible when the
condition matches (inspired by D).

Extend uops node in a way that the first member can be a type (cexpr). So an
uops node could hold these patterns:

	cexpr op cexpr ...
	type ID "=" cexpr op cexpr ...

After the namespace pass we could then look up what the first cexpr actually is
(type or variable) and resolve the node.

PROBLEM: Same as with free function calls. We're no longer sure when a new line
represents an EOS or not (and we have to ignore it). So we can't put it into an
uops node because we wouldn't know where the uops node has to end.

SOLUTION: Two token look ahead after first cexpr. If it's ID "=" we know it's a
variable definition. Otherwise it's a normal expression. No uops node needed.


Nice to have stuff
==================
