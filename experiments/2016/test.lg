// something
//syscall (foo + bar + 8) * x / batz

/*
// string literals
syscall 1, 1, "Hello World!\n", 13  // write text
syscall 3, 0  // close stdin
syscall 3, 1  // close stdout
syscall 60, 1*2 + 3*5
*/

/*
// test strings
var msg = "Hello World!\n"
syscall 1, 1, msg, 13
syscall 60, 0
*/

/*
syscall 1, 1, "Hello World!\n", 13

var foo = 1 + 2
var bar = foo * foo
var x = 1
var batz = 2
// BUG: broken MUL/spill!
syscall 60, (foo + bar + 8) * x / batz

syscall 60, bar
*/

/*
// variable assignment test
var str_ptr = "Hello World!\n"
var str_len = 13

str_ptr = "Hello Assigment!\n"
str_len = 17 * 1 + 0

syscall 1, 1, str_ptr, str_len

syscall 60, 0
*/

/*
// test for all C operators in lexer and parser
var x = not (4 << 2 == 8 != 7 || y && z and foo or bar)
var y = -7
var z = +17

syscall 60, 0
*/

/*
// scopes
var x = 1
{
	var foo = 2
	var bar = 3
	{
		var y = x
		syscall 60, y
	}
}
*/

/*
// comparison operators
var x = 17
syscall 60, x <= 16
*/

/*
// if
var x = 9
if x < 10
	x = 100
else
	x = 2
syscall 60, x
*/

/*
// while
var x = 10
var y = 0
while x < 100 do {
	x = x + 3
	y = y + 1
}
syscall 60, y
*/

/*
// function definitions
func main in(int argc, array_t argv) out(int) {
	syscall 60, 17
}
func foo in(int argc, array_t argv) out(int) {
	syscall 60, 13
}
*/

/*
// function call syntax
func main in(int argc, array_t argv) out(int) {
	var str_ptr = "Hello World!\n"
	var str_len = 13
	
	var result = syscall(1, 1, str_ptr, str_len)
	syscall(60, result)
}
*/

// function call
func main in(int argc, array_t argv) out(int) {
	var result = print("Hello World!\n", 13, 1)
	syscall(60, result)
}

func print in(int ptr, int len, int offset) out(int) {
	syscall(1, 1, ptr + offset, len - offset)
}