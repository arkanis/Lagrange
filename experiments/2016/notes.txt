# ToDo

- Add 8 bit data type
	- To assambler as operand (8 bit registers)
	- To compiler via tracking of variable and expression types (type info in
	  returned raa_t).
		OK add to raa_t struct
		OK create ast nodes for ulong and ubyte
		OK add type nodes to var and arg
		OK extend the parser to add them
		 - use ns_lookup to get the bits when allocating registers
		   helper function that aborts when name doesn't resolve to a type node
	- Write type pass
		- Create a type struct: name, bitwidth
		- Add type members to all expr nodes (nodes that generate output that can be stored)
		- Add builtin types: ulong, ubyte
- Create builtins and convert syscall to one
- Refactor compiler stuff into compiler.c
- Proper error reporting in parser
- structs for output arguments
- "struct" deconstruction for function returns: a, b, c = my_struct


# The great plan

- Needed in bootstrapping compiler
	- multiple modules
	- unsigned byte (for strings), optionally 16 and 32 bit ints
	- arrays (for strings and mmaped buffers)
	- structs
	- metaprogramming
	- debug symbols?
- Needed for a game
	- Linking with C shared objects
		- 32 bit ints (because of integer promotion)
		- floats, doubles (because of promotion again)
		- C calling convention
- Then try to implement the compiler in lagrange


# Nice to have

- Use central tables in lexer: one to map keywords between tokens and one for simple tokens and their names.
- A try(token_type_t) function in the parser instead of peek_type(). When it's possible to use this everywhere the parser can automatically present the user a list of expected tokens at the position the parser failed:
	- Every time try() is called it remembers the expected token.
	- When a token is consumed the list is cleared.
	- When the parser failes up the list contains all tried tokens at the current position.
	- This is what we want to show the user in the error message. :)
- An AST iterator to loop over all direct children of a node.
	- Like:
	  for(ast_it_t it = ast_start(node); it != NULL; it = ast_next(node, it)) { ... }
	- Iterator would have to remember the current member and if the member is a list the current list index.
	- Would allow to write recursive passes that can iterate over all nodes yet still handle some nodes in special ways.
	- We would also collect the code to iterate over the AST in one place. When we change the AST we wouldn't have to update all passes.


# Things to think about

- Think about user defined unary operators... really needed?
	- For primary expressions it's the same as a funciton call without parenthisis and one argument:
		func arg  // func can be an expression with dereferences, calls, etc.
		not x     // not can only be an ID... at least when operators can't be namespaced...
		ID ID
	- Difference can only be found when first id is resolved
- Can operators be namespaced? e.g. a numpy.+ b
	- Nice to resolve conflicts
	- But probably makes grammar a nightmare since we have to accept all operators as IDs, too
- Reserve -> and <- operators
	- Easy to type alternatives for → and ←. Kind of channel operators? Or better stay at >> and <<?
- Names for data types:
	- Still need a good name for 32 bit integer type
	- int is a generic name for all integer types
	i int
		b byte
		s short
		? ???
		l long
		w word
	f float
		h half
		s single
		d double
		q quad (quadruple)
		o ??? (octuple)


# Source code structure

ast.h
	Big union with node definitions
	Node spec structures
	Compile function declarations

ast.c
	AST print function
	AST pass function

compiler.c
	Compiler passes (e.g. uops reorder pass)
	Compile function definitions

register_allocator
	assembler
parser
	lexer


# Grammar history

## Basic start grammar

stmts = "syscall" ( expr ["," expr] )? eos
        expr eos
expr_wto = ID
           INTL
           STRL
           "(" expr ")"
	expr_wto means "expression without trailing operators"
expr = expr_wto [ ID expr_wto ]


## Added assignment "operator"

stmts = "syscall" ( expr ["," expr] )? eos
        expr eos
expr_wto = ID
           INTL
           STRL
           "(" expr ")"
expr = expr_wto [ (ID | "=") expr_wto ]
	ID is an operator, "=" is translated to the ID(=)


## Added variables

stmts = "syscall" ( expr ["," expr] )? eos
        "var" ID ( "=" expr )? eos
        expr eos
expr_wto = ID
           INTL
           STRL
           "(" expr ")"
expr = expr_wto [ (ID | ASSIGN) expr_wto ]

Scope:
	parent-scope
	hashtable: var-name → RSP-offset

Scope node:
	For now only the module is a scope node
	recurse in: create new scope
	recurse out: delete scope


## Operators

stmts = "syscall" ( expr ["," expr] )? eos
        "var" ID ( "=" expr )? eos
        expr eos
expr_wto  = ID
            INTL
            STRL
            "(" expr ")"
            unary_op expr_wto
expr      = expr_wto [ binary_op expr_wto ]
unary_op  = + - not ~
binary_op = ID . * / %  + - << >> < <= > >= == != & ^ | and or = *= /= %= += -= <<= >>= &= ^= |=


## Scope nodes

stmts = "syscall" ( expr ["," expr] )? eos
        "var" ID ( "=" expr )? eos
        "{" [ stmts ] "}"  // no eos needed
        expr eos
expr_wto  = ID
            INTL
            STRL
            "(" expr ")"
            unary_op expr_wto
expr      = expr_wto [ binary_op expr_wto ]
unary_op  = + - not ~
binary_op = ID . * / %  + - << >> < <= > >= == != & ^ | and or = *= /= %= += -= <<= >>= &= ^= |=


## if statement

stmt = "syscall" ( expr ["," expr] )? eos
       "var" ID ( "=" expr )? eos
       "{" [ stmt ] "}"  // no eos needed
       "if" expr ( eos | "then" ) stmt ( "else" stmt )?  // eos already part of trailing stmt
       expr eos
expr_wto  = ID
            INTL
            STRL
            "(" expr ")"
            unary_op expr_wto
expr      = expr_wto [ binary_op expr_wto ]
unary_op  = + - not ~
binary_op = ID . * / %  + - << >> < <= > >= == != & ^ | and or = *= /= %= += -= <<= >>= &= ^= |=


## while statement

stmt = "syscall" ( expr ["," expr] )? eos
       "var" ID ( "=" expr )? eos
       "{" [ stmt ] "}"  // no eos needed
       "if" expr ( eos | "then" ) stmt ( "else" stmt )?
       "while" expr ( eos | "do" ) stmt
       expr eos
expr_wto  = ID
            INTL
            STRL
            "(" expr ")"
            unary_op expr_wto
expr      = expr_wto [ binary_op expr_wto ]
unary_op  = + - not ~
binary_op = ID . * / %  + - << >> < <= > >= == != & ^ | and or = *= /= %= += -= <<= >>= &= ^= |=

Just use rudimentary syntax because it will be replaced by function call syntax.


## function definitions

module  = [ def ]
def     = "func" ID [ def-mod ] "{" [ stmt ] "}"
def-mod = ( "in" | "out" )  "(" ID ID? [ "," ID ID? ] ")"
stmt = "syscall" ( expr ["," expr] )? eos
       "var" ID ( "=" expr )? eos
       "{" [ stmt ] "}"  // no eos needed
       "if" expr ( eos | "then" ) stmt ( "else" stmt )?
       "while" expr ( eos | "do" ) stmt
       expr eos
expr_wto  = ID
            INTL
            STRL
            "(" expr ")"
            unary_op expr_wto
expr      = expr_wto [ binary_op expr_wto ]
unary_op  = + - not ~
binary_op = ID . * / %  + - << >> < <= > >= == != & ^ | and or = *= /= %= += -= <<= >>= &= ^= |=

The argument type is an ID for now because expr can contain operators. "int argc"
is then parsed as the ID "int" followed by the operator "argc" and then expects
another expr as second operand.

Therefore type expressions can't contain user defined operators. As soon as an ID
can be parsed as operator (doesn't matter if binary or unary) this problem will
occur.

Next stop is to design a type-expr in the draft syntax and use this instead of IDs.


## function calls

module  = [ def ]
def     = "func" ID [ def-mod ] "{" [ stmt ] "}"
def-mod = ( "in" | "out" )  "(" ID ID? [ "," ID ID? ] ")"
stmt = "var" ID ( "=" expr )? eos
       "{" [ stmt ] "}"  // no eos needed
       "if" expr ( eos | "then" ) stmt ( "else" stmt )?
       "while" expr ( eos | "do" ) stmt
       expr eos
expr_wto  = ID
            INTL
            STRL
            "(" expr ")"
            unary_op expr_wto
            ID "(" ( expr ["," expr] )? ")"
expr      = expr_wto [ binary_op expr_wto ]
unary_op  = + - not ~
binary_op = ID . * / %  + - << >> < <= > >= == != & ^ | and or = *= /= %= += -= <<= >>= &= ^= |=

syscall is converted into a normal function call with ID "syscall" (a builtin).

This is just rudimentary syntax. Real syntax development mostly happesn with the
draft syntax in Plains. This makes it easier to focus on implementation.

1st try at calling convention:
	input  R0 - R7
	CALL displ
	output R0 - R7
	
	caller has to safe unused input regs
	callee has to safe R8 - R15 if used
	
	problem: How to use registers as local variables in function? Not easy right
	now. Better push the args on the stack so they're available for RBP relative
	addressing, just like local vars. Then we only have to set them up as local
	vars with the proper offsets.

2nd try:
	caller pushes output and input args on stack (first to last)
	callee cleans up the stack
	
	call:
		alloc out args on stack, first to last
		putsh in args on stack, first to last
		CALL 0
		put CALL disp into addr slot
		for now free all but first out arg
	
	call:
		sub RSP, out.argc*8
		push in1
		push inn
		call displ
		add RSP, (out.argc-1)*8
	
	prologue:
		push RBP
		mov RBP, RSP
		sub RSP, stack_frame_size
	
	local args:
		addressed as static RBP offsets (relative to stack frame)
		in(n)  = [RBP + (1 + in.argc - n)*8]
		out(n) = [RBP + (1 + in.argc + out.argc - n)*8]
	
	epilogue:
		mov RSP, RBP
		pop RBP
		add RSP, in.argc*8
		ret

3rd try:
	Ideas:
	- The caller knows the return RIP becuase it's just the address of the
	  instruction after the call. So we can insert it statically. So we can build
	  a CALL instruction by ourselves by PUSHing the address of the instruction
	  after the "call" and jumping to the target function. The "ret" in the target
	  function then just POPs the address and jumps to it.
	- After the call the caller can free all unused input and output arguments by
	  a single ADD RSP instruction. It knows how many input args it pushed so it
	  can include that in the added offset.
	
	caller saved: rax, rdi, rsi, rdx, rcx, r8, r9, r10, r11
	callee saved: rbx, rsp, rbp, r12, r13, r14, r15
	
	
	stack layout:
	| ... caller stack
	| caller saved regs
	| out 1
	| out 2
	| out n
	| in 1
	| in 2
	| in n
	| ret addr           __
	| callee saved regs    \ RSP at start of target_func code
	| saved BP          __
	| ... callee stack    \ RBP of target_func
	
	caller:
	- allocate stack space for currently allocated regs (that need to be saved)
	- allocates stack space for out args
	- push in args (can use all regs here)
	- preserve caller saved regs into the space allocated for them in step 1
	- call target_func
	- cleanup input and unused output args
	- if at least 1 out arg: pop out arg into RAX
	- restore caller saved regs, except RAX
	- if necessary: put output value from RAX into requested result register
	
	callee:
	- preserve callee saved regs (before: save BP)
	- set BP to local stack frame
	- allocate space for local variables
	- ... function body
	- reset SP to BP (free all local variables)
	- restore callee saved regs (before: restore BP of caller)
	- return to caller
	
	call:
		sub RSP, out.argc*8
		push in_1
		push in_2
		push in_n
		call target_func
		add RSP, (in.argc + out.argc - 1)*8
	
	prologue:
		push RBP
		mov RBP, RSP
		sub RSP, stack_frame_size
	
	local args:
		The "1" offset skips the saved BP and return address.
		in(n)  = [RBP + (1 + in.argc - n)*8]
		out(n) = [RBP + (1 + in.argc + out.argc - n)*8]
	
	epilogue:
		mov RSP, RBP
		pop RBP
		ret

compile pass:
	compiles main func
	builds addr slot table for external references
	all referenced function are added to compiler queue
	compile all funcs in the queue until queue is empty
	
	local variables:
		arg, var nodes: frame_offset member
		func node: frame_size member
		
		on func node:
			iterate over all out args, calculate their frame_offset members
			iterate over all in args, calculate their frame_offset members
			arg nodes not iterated by themselves but handled by their parent func node
			
			assemble prologue (remember location of sub immediate)
			compile body (iterate over all var nodes inside, frame_size incremented for each one)
			patch the stack frame size in the prologue
			assemble epilogue
		
		on var node:
			calculate frame_offset:
				get containing func node, use its frame_size member and increment it afterwards
			compile value expr
		
		on id:
			lookup definition via namespace
			get frame_offset from definition node
			assemble

linker pass:
	take assembled functions and fill addr slots with proper displacements to
	targets.
	write output to executable.


## return statement

module  = [ def ]
def     = "func" ID [ def-mod ] "{" [ stmt ] "}"
def-mod = ( "in" | "out" )  "(" ID ID? [ "," ID ID? ] ")"
stmt = "var" ID ( "=" expr )? eos
       "{" [ stmt ] "}"  // no eos needed
       "if" expr ( eos | "then" ) stmt ( "else" stmt )?
       "while" expr ( eos | "do" ) stmt
       "return" ( expr ["," expr] )? eos
       expr eos
expr_wto  = ID
            INTL
            STRL
            "(" expr ")"
            unary_op expr_wto
            ID "(" ( expr ["," expr] )? ")"
expr      = expr_wto [ binary_op expr_wto ]
unary_op  = + - not ~
binary_op = ID . * / %  + - << >> < <= > >= == != & ^ | and or = *= /= %= += -= <<= >>= &= ^= |=



# Further ideas


# function calls

module  = [ def ]
def     = "func" ID [ def-mod ] "{" [ stmt ] "}"
def-mod = ( "in" | "out" )  "(" ID ID? [ "," ID ID? ] ")"

block   = "{"  [ stmt ] "}"
          "do" [ stmt ] "end"

// syscall, while becomes expr (function call)
// "{" bcomes block
// "if" should resemble function call syntax
stmt = "syscall" ( expr ["," expr] )? eos
       "var" ID ( "=" expr )? eos
       "{" [ stmt ] "}"  // no eos needed
       "if" expr ( eos | "then" ) stmt ( "else" stmt )?
       "while" expr ( eos | "do" ) stmt
       expr eos
eos  = EOF
       WSNL
       only-peek: "}"    // because of block
       only-peek: "end"  // because of block

// Safe to use as type: Always ends clean, no open end to type_expr
basic_expr_start = ID
                   INTL
                   STRL
                   "(" full_expr ")"
basic_expr_tail  = "." ID
                   "(" ( arg [ "," arg ] )? ")" block?
                   "[" ( arg [ "," arg ] )? "]"
arg              = ID ":" full_expr
                   full_expr
basic_expr       = basic_expr_start [ basic_expr_tail ]


// Safe to use in arguments of func calls without paras. So it can't contain func
// calls without paras by itself.
child_expr_elem = basic_expr
                  unary_op basic_expr
child_expr_tail  = 
child_expr = child_expr_start [ binary_op child_expr_start ]

unary_op  = + - not ~
binary_op = ID . * / %  + - << >> < <= > >= == != & ^ | and or = *= /= %= += -= <<= >>= &= ^= |=



literal        = ID
                 INTL
                 STRL

// Safe to use as type: Always ends clean, no open end to type_expr
type_expr      = literal      [ type_expr_tail ]
                 "(" expr ")" [ type_expr_tail ]
type_expr_tail = "(" ( arg [ "," arg ] )? ")" ( "{" [stmt] "}" )?
                 "[" ( arg [ "," arg ] )? "]"
                 "." ID
arg            = ID ":" expr
                 expr

// Safe to use in arguments of func calls without paras. So it can't contain func
// calls without paras by itself.
child_expr = expr_wto [ binary_op expr_wto ]
             expr_wto "(" ( arg [ "," arg ] )? ")" ( "{" [stmt] "}" )?
             expr_wto "[" ( arg [ "," arg ] )? "]"
             

expr       = 

expr_wto  = literals
            "(" expr ")"
            unary_op expr_wto
// Has to terminate on binary_op of: "," ")" "]" (arg in type_expr_tail) EOF
expr      = expr_wto [ binary_op expr_wto ]        // (1)
            expr_wto "(" ( arg [ "," arg ] )? ")" ( "{" [stmt] "}" )?
            expr_wto "[" ( arg [ "," arg ] )? "]"
expr_wp   = expr
            // case without args already coverd by (1) with expr_wto "." expr_wto
            // Need a 2 token look ahead to differ between:
            //   arg (ID ":")
            //   binary_op expr_wto (ID ...)
            //   expr
            expr_wto arg [ "," arg ] ( "{" [stmt] "}" )?
unary_op  = + - not ~
binary_op = ID . * / %  + - << >> < <= > >= == != & ^ | and or = *= /= %= += -= <<= >>= &= ^= |=

type_expr:
	Only stuff that can be chained: "." () []. No user defined operators.
	If we see an ID we wouldn't know if it's the argument name or an operator.
	
	Could also be handled with two tokens look aheads: ID "," or ID ")". Then it
	is the argument name, otherwise an operator for an expression.
	For variable definitions: type_expr ID "=". So the look ahead would be ID "=".


## Index access "operator"

expr_wb = "[" expr ["," expr] "]"

Same as function call but with different parenthesis


## Use [] with named args to avoid index-index, index-length confusion of number args/ranges

Idea: In collection access it's confusing if we use index-index arguments or index-length
arguments to specify what slice of the collection we want to have.

Ruby uses ranges to differ: Ranges signal index-index style, normal number index-length style.

Why not use named arguments like "len" and "to" to make it clear:

collection[from: 7, to: 9]
collection[from: 7, len: 2]
collection[7, to: 9]
collection[7, len: 2]
collection[7, 2]  // from: 7, len: 2

operator elem in(size_t from, size_t.nullable len, size_t.nullable to, size_t.nullable stride)
              out(elem_t) { ... }

Hm, well, better use a slice function for that and use named arguments in there.
Kind of a strecht for the element access operator to also do slicing of
collections...

Problem: Arguments would allow to leave len and to at null. Can't completely
validate at compile time that either one is set and not null.
But: Could also use that as advantage. If both are null the entire rest of the
list is returned.


## Get struct types for function input and output "structs"

Something like that:

type_t func_type = overloadset(foo).in(int, int)
func_type.in_type  → struct(int, int)
func_type.out_type → struct(int)

So that we can explicitly define variables that can contain the entire return
data from a function.


## Collections

word[] array → dynamic array with word elements
word[7] array → static array with word elements
word[string] array → hash table with string keys and word values


## Calling convention for tail-call optimization

- Not something for the bootstrapping compiler.
- To optimize a tail call we just want to leave the return address and saved BP
  where they are. Just replace the input arguments with the ones for the tail
  call target and jump there.

Normal call     Tail call (replaces in args, then jumps)

| ...      |    | ...
| out 1    |    | out 1
| out 2    |    | out 2
| out n    |    | out n
| ret addr |    | ret addr
| saved BP |    | saved BP
| in 1     |    | new in 1
| in 2     |    | new in n
| in n     |    | ...
| ...      |    

- On a tail call we just want to overwrite the in args with new values and jump
  to the tail call target.
- Number of output arguments have to match. Possible to do that, too?
- Remember: Args should be passed in registers anyway, stack space only there
  for spilling. Var args influence that, too.